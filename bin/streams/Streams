
// For Creation

IntStream.of(numbers)	// From Array
IntStream.range(1, 101)	// 1..100
IntStream.rangeClosed(1, 101)	// 1..100
IntStream.generate(supplier())	// From Supplier

// For Processing
IntStream.of(numbers).distinct();			// To get Distinct Values
IntStream.of(numbers).sorted();				// To Sort Values
IntStream.of(numbers).limit(3);				// To get First 3 Values
IntStream.of(numbers).skip(3);				// To skip First 3 Values
IntStream.of(numbers).filter( num -> num % 2 == 0);	// To get Even Values
IntStream.of(numbers).filter( num -> num % 2 == 1);	// To get Odd Values
IntStream.of(numbers).map( num -> num * 2);		// Double Each number
IntStream.of(numbers).boxed();				// Convert each number into Integer
IntStream.of(numbers).average();		// Average
IntStream.of(numbers).min();			// Min
IntStream.of(numbers).max();			// Max
IntStream.of(numbers).count();			// Count
IntStream.of(numbers).sum();			// Sum
	
// For Consuming
IntStream.range(1, 100).forEach(System.out :: println);	// Print on console
IntStream.range(1, 100).toArray();						// Collect into Array
IntStream.range(1, 100).boxed().collect(Collectors.toList();	// Collect into List
IntStream.range(1, 100).anyMatch(num -> num %2 == 1);	// Is any number Odd
IntStream.range(1, 100).allMatch(num -> num %2 == 1);	// Are all numbers Odd

// Parallel Stream
employess.stream().parallel()				// When Input Stream is very large, When to distribute work internally and aggregate all the values together
employess.parallelStream()